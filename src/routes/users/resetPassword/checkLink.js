import S from 'fluent-json-schema'

export default async function checkLink(fastify) {
  const { pg } = fastify

  fastify.route({
    method: 'GET',
    path: '/reset-password/:token',
    config: {
      public: true,
    },
    schema: {
      summary: 'Reset link check',
      description: 'Check the rest link and related info.',
      params: S.object()
        .additionalProperties(false)
        .prop('token', S.string().minLength(60).maxLength(60))
        .description('Reset password token autogenerated b')
        .required(),
      response: {
        204: fastify.getSchema('sNoContent'),
      },
    },
    preHandler: onPreHandler,
    handler: onCheckLink,
  })

  async function onPreHandler(req, reply) {
    const { log } = req
    const { token } = req.params

    const resetLink = await pg.execQuery(
      'SELECT * FROM reset_links WHERE token=$1',
      [token],
      { findOne: true }
    )

    if (!resetLink) {
      log.debug('[reset password] failed: rest link not found')
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Errore',
      })
    }

    if (resetLink.alreadyUsed) {
      log.debug('[reset password] failed: rest link already used')
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Link giÃ  utilizzato.',
      })
    }

    if (new Date().toISOString() > resetLink.expiredAt.toISOString()) {
      log.debug('[reset password] failed: rest link expired')
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Link scaduto',
      })
    }

    const user = await pg.execQuery(
      'SELECT * FROM users WHERE id=$1',
      [resetLink.userId],
      { findOne: true }
    )

    if (!user) {
      log.debug(`[reset password] failed: user not found (${user.email})`)
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Utente non trovato.',
      })
    }

    if (user.isBlocked) {
      log.debug(`[reset password] failed: user blocked (${user.email})`)
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Utente bloccato.',
      })
    }

    if (user.isDeleted) {
      log.debug(`[reset password] failed: user deleted (${user.email})`)
      return reply.render('/reset-password/reset-password-error.html', {
        errorMsg: 'Utente cancellato.',
      })
    }

    req.user = user
  }

  async function onCheckLink(req, reply) {
    const { user } = req

    await pg.execQuery(
      'UPDATE reset_links SET already_used=$2 WHERE user_id=$1',
      [user.id, true]
    )

    return reply.render('/reset-password/reset-password-form.html', {
      firstName: 'Phil',
    })
  }
}
